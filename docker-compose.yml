services:
  postgres:
    image: postgres:14
    container_name: tcph-postgres
    environment:
      POSTGRES_DB: tcph_dw
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - tcph-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tcph_dw"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "8080:80"
    networks:
      - tcph-network
    depends_on:
      postgres:
        condition: service_healthy

  minio:
    image: minio/minio:latest
    container_name: tcph-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    ports:
      - "9000:9000"  # API endpoint
      - "9001:9001"  # Web console
    volumes:
      - minio_data:/data
    networks:
      - tcph-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Spark Services
  spark-master:
    build:
      context: .
      dockerfile: infrastructure/spark/Dockerfile
    container_name: tcph-spark-master
    env_file: .env
    environment:
      - SPARK_MODE=master
    ports:
      - "8081:8080"  # Spark Master Web UI
      - "7077:7077"  # Spark Master port
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./spark-data:/opt/spark-data
    networks:
      - tcph-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  spark-worker-1:
    build:
      context: .
      dockerfile: infrastructure/spark/Dockerfile
    container_name: tcph-spark-worker-1
    env_file: .env
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    ports:
      - "8082:8081"  # Worker Web UI
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./spark-data:/opt/spark-data
    networks:
      - tcph-network
    depends_on:
      - spark-master

  spark-worker-2:
    build:
      context: .
      dockerfile: infrastructure/spark/Dockerfile
    container_name: tcph-spark-worker-2
    env_file: .env
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    ports:
      - "8083:8081"  # Worker Web UI
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./spark-data:/opt/spark-data
    networks:
      - tcph-network
    depends_on:
      - spark-master

  spark-thrift:
    build:
      context: .
      dockerfile: infrastructure/spark/Dockerfile
    container_name: tcph-spark-thrift
    env_file: .env
    command: sh -c "sleep 20 && /opt/bitnami/spark/sbin/start-thriftserver.sh --master spark://spark-master:7077 --conf spark.cores.max=2 --conf spark.sql.warehouse.dir=s3a://gold/warehouse/"
    ports:
      - "10000:10000"  # Thrift Server port (for DBT)
      - "4040:4040"    # Spark SQL Web UI
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./spark-data:/opt/spark-data
    networks:
      - tcph-network
    depends_on:
      - spark-master
      - minio

  spark-notebook:
    build:
      context: .
      dockerfile: infrastructure/spark-notebook/Dockerfile
    container_name: tcph-spark-notebook
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_DRIVER_HOST=spark-notebook
      - SPARK_DRIVER_BINDADDRESS=0.0.0.0
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./infrastructure/spark-notebook/conf/spark-defaults.conf:/usr/local/spark/conf/spark-defaults.conf
      - ./spark-apps:/opt/spark-apps
      - ./spark-data:/opt/spark-data
    ports:
      - "8888:8888"    # Jupyter Lab
      - "4043:4040"    # Spark UI
      - "4041:4041"    # Additional Spark UI ports
      - "4042:4042"
    networks:
      - tcph-network
    depends_on:
      - spark-master
      - minio

  
  # Airflow Postgres - separate instance
  # Airflow Postgres - separate instance
  airflow-postgres:
    image: postgres:13
    container_name: tcph-airflow-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow123
      POSTGRES_DB: airflow
    ports:
      - "5433:5432"
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    networks:
      - tcph-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
    restart: unless-stopped

  airflow-init:
    build:
      context: .
      dockerfile: infrastructure/airflow/Dockerfile
    container_name: tcph-airflow-init
    env_file: .env
    user: "0:0"
    volumes:
      - .:/sources
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./scripts:/opt/airflow/scripts
    networks:
      - tcph-network
    depends_on:
      airflow-postgres:
        condition: service_healthy
    command: >
      bash -c "
        mkdir -p /sources/logs /sources/dags /sources/plugins &&
        chown -R 50000:0 /sources/{logs,dags,plugins} &&
        airflow db init &&
        airflow users create --username admin --password admin123 --firstname Admin --lastname User --role Admin --email admin@example.com
      "

  airflow-webserver:
    build:
      context: .
      dockerfile: infrastructure/airflow/Dockerfile
    container_name: tcph-airflow-webserver
    env_file: .env
    user: "50000:0"
    ports:
      - "8090:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - ./logs:/opt/airflow/logs
    networks:
      - tcph-network
    depends_on:
      - airflow-init
      - spark-master
      - minio
    command: webserver
    restart: unless-stopped

  airflow-scheduler:
    build:
      context: .
      dockerfile: infrastructure/airflow/Dockerfile
    container_name: tcph-airflow-scheduler
    env_file: .env
    user: "50000:0"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - ./logs:/opt/airflow/logs
    networks:
      - tcph-network
    depends_on:
      - airflow-webserver
    command: scheduler
    restart: unless-stopped

# Thêm vào volumes:
#   airflow_postgres_data:
  
volumes:
  postgres_data:
  airflow_postgres_data:
  pgadmin_data:
  minio_data:

networks:
  tcph-network:
    driver: bridge